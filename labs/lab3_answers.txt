-- Lab Session 3
--
-- Sample answers

-- Q1

isPalindrome :: (Eq a) => [a] -> Bool

isPalindrome x = if x == reverse x
                 then True
                 else False


-- Q2

shortest :: [[a]] -> [a]

shortest [x] = x

shortest (x:xs) = if length x < length (shortest xs)
                  then x
                  else shortest xs


-- Q3
      
type Poly = [Float]

addPolys :: Poly -> Poly -> Poly

addPolys [] p = p

addPolys p [] = p

addPolys (p:ps) (q:qs) = (p+q):(addPolys ps qs)


-- Q4

evalPoly :: Poly -> Float -> Float

evalPoly [p] _ = p

evalPoly (p:ps) x = p + (x * (evalPoly ps x))

